.sr rec rec
.sr in in
.sr to to
.sr is is
.sr exp *
.sr zeroôš0õCE.çr inf 4*
.tr ` 
.width "	____"
.nr d_stop1 hpos+width
.width |__
.nr d_stop2 d_stop1+width
.width "	where__"
.nr where_stop1 hpos+width
.width ___
.nr where_stop2 where_stop1+width
.width then_
.nr if_dif width
.width else_
.nr if_dif if_dif-width
.nr if_level 0
.de translate
.tr ?#+&{}<>/
..
.de semantic
.tr [<]>!
..
.de syntactic
.tr [[]]!!
..
.de normal
.tr ??##++&&!!{{}}<<>>//[[]]
..
.de if_
if 
.nr if_level if_level+1
.nr if_stop\if_level hpos
..
.de then
.br
.nr hpos if_stop\if_level
then 
..
.de else
.br
.nr hpos if_stop\if_level
else 
.nr hpos hpos+if_dif
.nr if_level if_level-1
..
.de where
	where
.nr hpos where_stop1
\0
.nr hpos where_stop2
= 
..
.de and
.br
.nr hpos where_stop1
\0
.nr hpos where_stop2
= 
..
.de b
.syntactic
{\0}
.semantic
..
.de e
6E*b(\0)(\1, \2)
..
.de s
6S*b(\0)(\1, \2)
..
.de c
6C*b(\0)(\1, \2)
..
.de t
6T*b(\0)(\1, \2)
..
.de m
6M*b(\0)(\1)
..
.de p
6P*b(\0)(\1)
..
.de d
.br
\0:
.nr hpos d_stop2
..
.de or
.br
.nr hpos d_stop1
|
.nr hpos d_stop2
..
.de update
\0
.syntactic
[
.semantic
\1 < \2
.syntactic
]
.semantic
..
.de replace
\0
.syntactic
[
.semantic
\1 @ \2
.syntactic
]
.semantic
..
.de replace2
\0
.syntactic
[
.semantic
\1 @ \2, \3 @ \4
.syntactic
]
.semantic
..
